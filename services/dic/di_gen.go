//go:build !templater && !di
// +build !templater,!di

// Code generated by "templater"; DO NOT EDIT.
// source: di.go
package dic

// gen
import (
	"log/slog"
	"strings"

	"github.com/google/wire"
	"github.com/jansaidl/zerops-mcp/services/server"
	"github.com/jansaidl/zerops-mcp/tools/container"
	"github.com/spf13/cobra"
	"github.com/zerops-dev/di/app"
	"github.com/zerops-dev/di/appRunner"
	configurator "github.com/zerops-dev/di/di"
)

type Config struct {
	NameServerConfig7 server.Config
}

func NewConfig(prefix string,
	configurator *configurator.Handler,
) *Config {
	c := &Config{
		NameServerConfig7: (server.Config)(server.NewConfig()),
	}
	configurator.Register(concat(prefix, "server"), &c.NameServerConfig7)

	return c
}

type NameServerConfig7 server.Config

func GetNameServerConfig7(c Config) NameServerConfig7 {
	return NameServerConfig7(c.NameServerConfig7)
}

type AppConfig struct {
	configurator *configurator.Handler
	config       *Config
}

func NewAppConfig(prefix string, cmd *cobra.Command) *AppConfig {
	configurator := configurator.New(cmd)
	return &AppConfig{
		configurator: configurator,
		config:       NewConfig(prefix, configurator),
	}
}

func (c *AppConfig) Read(app *app.ApplicationSetup, cmd *cobra.Command) error {
	return c.configurator.Read(app, cmd)
}

func (c *AppConfig) Configurator() *configurator.Handler {
	return c.configurator
}

func (c *AppConfig) Register(prefix string, in interface{}) {
	c.configurator.Register(prefix, in)
}

func (c *AppConfig) ConfigCommand(app *app.ApplicationSetup) *cobra.Command {
	return c.configurator.ConfigCommand(app)
}

func (c *AppConfig) Config() Config {
	return *c.config
}

func concat(parts ...string) string {
	var result []string
	for _, part := range parts {
		p := strings.TrimPrefix(part, "<")
		if strings.HasPrefix(part, "<") && len(result) > 0 {
			result[len(result)-1] = p
		} else {
			result = append(result, p)
		}
	}
	return strings.Join(result, ".")
}

type NameAppRunnerHandler0 appRunner.Handler

func GetNameAppRunnerHandler0(arg0 *NameSlogLogger2,
) *NameAppRunnerHandler0 {

	return (*NameAppRunnerHandler0)(appRunner.New((*slog.Logger)(arg0)))

}

type NameAppRunnerRegister1 appRunner.Register

func GetNameAppRunnerRegister1(arg0 *NameAppRunnerHandler0,
) NameAppRunnerRegister1 {

	return (NameAppRunnerRegister1)(appRunner.DiBind((*appRunner.Handler)(arg0)))

}

type NameServerHandler3 server.Handler

func GetNameServerHandler3(arg0 NameServerConfig7,
	arg1 NameAppRunnerRegister1,
) (*NameServerHandler3, error) {

	v, err := server.New((server.Config)(arg0),
		(appRunner.Register)(arg1),
	)
	return (*NameServerHandler3)(v), err

}

type NameSlogLogger2 slog.Logger

func GetNameSlogLogger2() *NameSlogLogger2 {

	return (*NameSlogLogger2)(appRunner.NewLog())

}

type NameContainerReadDir4 container.ReadDir

func GetNameContainerReadDir4() *NameContainerReadDir4 {

	return (*NameContainerReadDir4)(container.NewReadDir())

}

type NameContainerReadFile5 container.ReadFile

func GetNameContainerReadFile5() *NameContainerReadFile5 {

	return (*NameContainerReadFile5)(container.NewReadFile())

}

type NameContainerWriteFile6 container.WriteFile

func GetNameContainerWriteFile6() *NameContainerWriteFile6 {

	return (*NameContainerWriteFile6)(container.NewWriteFile())

}

type setter_0 struct{}
type setter_0_Value server.Tools

func getSetter_0_Value(target *NameContainerReadDir4) (setter_0_Value, error) {

	return (setter_0_Value)((*container.ReadDir)(target)), nil

}

func setSetter_0(source *NameServerHandler3, target setter_0_Value) *setter_0 {

	server.RegisterTools((*server.Handler)(source), target)
	return &setter_0{}

}

type setter_1 struct{}
type setter_1_Value server.Tools

func getSetter_1_Value(target *NameContainerReadFile5) (setter_1_Value, error) {

	return (setter_1_Value)((*container.ReadFile)(target)), nil

}

func setSetter_1(source *NameServerHandler3, target setter_1_Value) *setter_1 {

	server.RegisterTools((*server.Handler)(source), target)
	return &setter_1{}

}

type setter_2 struct{}
type setter_2_Value server.Tools

func getSetter_2_Value(target *NameContainerWriteFile6) (setter_2_Value, error) {

	return (setter_2_Value)((*container.WriteFile)(target)), nil

}

func setSetter_2(source *NameServerHandler3, target setter_2_Value) *setter_2 {

	server.RegisterTools((*server.Handler)(source), target)
	return &setter_2{}

}

var DepSet = wire.NewSet(
	app.Set,
	NewApplication, getSetter_0_Value, setSetter_0,
	getSetter_1_Value, setSetter_1,
	getSetter_2_Value, setSetter_2,
	GetNameAppRunnerHandler0,
	GetNameAppRunnerRegister1,
	GetNameServerHandler3,
	GetNameSlogLogger2,
	GetNameContainerReadDir4,
	GetNameContainerReadFile5,
	GetNameContainerWriteFile6,

	GetNameServerConfig7,
)

func NewApplication(
	systemApp *app.ApplicationSetup, _ *setter_0,
	_ *setter_1,
	_ *setter_2,
	runner00 *NameAppRunnerHandler0,
	_ NameAppRunnerRegister1,
	_ *NameServerHandler3,
	_ *NameSlogLogger2,
	_ *NameContainerReadDir4,
	_ *NameContainerReadFile5,
	_ *NameContainerWriteFile6,
) *App {
	return &App{
		app:    systemApp,
		runner: (*appRunner.Handler)(runner00),
	}
}

type App struct {
	app    *app.ApplicationSetup
	runner *appRunner.Handler
}

func (h *App) GetRunner() *appRunner.Handler {
	return h.runner
}
func (h *App) Run() error {
	return h.runner.RunWithSigTerm(h.app.Context, h.app.Cancel)
}

func CreateCommand(app *app.ApplicationSetup) *cobra.Command {

	cmd := &cobra.Command{
		Use:   "run",
		Short: "run command",
		Long:  "",
	}

	cfg := NewAppConfig("zerops-mcp", cmd)

	cmd.RunE = func(cmd *cobra.Command, args []string) error {
		if err := cfg.Read(app, cmd); err != nil {
			return err
		}

		application, err := CreateApp(app, cfg.Config())
		if err != nil {
			panic(err)
		}
		return application.Run()
	}
	cmd.AddCommand(cfg.ConfigCommand(app))

	return cmd
}
